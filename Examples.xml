<?xml version="1.0" encoding="utf-8"?>
<Data>
  <Folders>
    <Folder>
      <Title>Programmers Guide</Title>
      <Description>This Section includes examples related to following topics:
 
- Introduction
- Working with Barcode
- Working with Barcode Image
- Working with 2D Barcodes
- Working with Barcode Recognition
- Using with Microsoft .NET Compact Framework</Description>
      <FolderName>ProgrammersGuide</FolderName>
      <Order>1</Order>
      <Folders>
        <Folder>
          <Title>Working with Barcode Image</Title>
          <Description>This Section includes exampels related to following topics: 

- Barcode Image Basic Features 
- Barcode Image Utility Features</Description>
          <FolderName>WorkingWithBarcodeImage</FolderName>
          <Order>1</Order>
          <Folders>
            <Folder>
              <Title>Barcode Image Utility Features</Title>
              <Description>This Section includes examples related to following topics: 

- Customize Barcode Image Resolution 
- Set Size Unit for the Barcode Image 
- Save Barcode Images to different Formats 
- Save Barcode Image to Streams 
- Print Barcode Image</Description>
              <FolderName>BarcodeImageUtilityFeatures</FolderName>
              <Order>1</Order>
              <Examples>
                <Example>
                  <Title>Save Barcode Images to different Formats</Title>
                  <Description>Aspose.BarCode facilitates its developers to save the barcode images to most of the popular image formats. All barcode generating classes (BarCodeBuilder, BarCodeControl or BarCodeWebControl) provided by Aspose.BarCode, have a public method, Save. 
Save method takes an instance of System.Drawing.Imaging.ImageFormat class (which is the part of Microsoft .NET Framework). Following image formats can be passed to Save method of the barcode class as an argument:

- ImageFormat.Bmp
- ImageFormat.Emf
- ImageFormat.Exif
- ImageFormat.Gif
- ImageFormat.Icon
- ImageFormat.Jpeg
- ImageFormat.MemoryBmp
- ImageFormat.Png
- ImageFormat.Tiff
- ImageFormat.Wmf

This example explains this concept in a very easy way.</Description>
                  <FolderName>SaveBarcodeImagesToDifferentFormats</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Save barcode images to different formats</DisplayName>
                    <Url>save+barcode+images+to+different+formats</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Generate Barcode by Specifying Custom Image Size</Title>
                  <Description>Aspose.BarCode for Java automatically adjusts the image size (width and height) according to the generated barcode’s size. But, you can also control the image size by specifying height and width of image using BarCodeBuilder.setImageHeight() and setImageWidth() methods. BarCodeBuilder.setAutoSize() should be set to false in order to customize the image size.</Description>
                  <FolderName>GenerateBarcodebySpecifyingCustomImageSize</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Generate Barcode by Specifying Custom Image Size</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Generate+Barcode+by+Specifying+Custom+Image+Size</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.out.png</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Customize Barcode Image Resolution</Title>
                  <Description>What if developers need to set the resolution of their barcode images according to their custom settings?
Well, Aspose.BarCode also addresses this issue and provides Resolution class that serves developers to customize the resolution of their barcode images in any way they want. 
Resolution class has three major properties:

setDpiX() method that is used to set Horizontal Resolution settings of the barcode image in Dot per inches (Dpi)
setDpiY() method that is used to set Vertical Resolution settings of the barcode image in Dot per inches (Dpi)</Description>
                  <FolderName>CustomizeBarcodeImageResolution</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Customize Barcode Image Resolution</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Customize+Barcode+Image+Resolution</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Barcode Image Basic Features</Title>
              <Description>This section includes the following topics: 
Working with Image Borders 

- Colorize any Part of the Barcode Image 
- Rotate Barcode Image
- Control Barcode Image Quality 
- Set Barcode Image MarginsF</Description>
              <FolderName>BarcodeImageBasicFeatures</FolderName>
              <Order>2</Order>
              <Examples>
                <Example>
                  <Title>Rotate Barcode Image</Title>
                  <Description>Aspose.BarCode allows developers to rotate the barcode image by calling the setRotationAngleF() method of the barcode class.</Description>
                  <FolderName>RotateBarcodeImage</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Rotate Barcode Image</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Rotate+Barcode+Image</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.out.png</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Working with Image Borders</Title>
                  <Description>Aspose.BarCode allows its users to handle image borders, which include margins and its width.</Description>
                  <FolderName>WorkingwithImageBorders</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Working with Image Borders</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Working+with+Image+Borders</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode-borders.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Colorize any Part of the Barcode Image</Title>
                  <Description>Normally, barcodes are generated and printed in black and white colors. But, what if it is required to generate a colored barcode?
Keeping this possible requirement in mind, Aspose.BarCode gives free hand to developers to change the colors of: 

- Barcode
- Code text
- Barcode Background
- Barcode Border
- Caption

BarCodeBuilder class has following methods that are used to colorize different parts of a barcode as follows: 

- setForeColor() method to assign any color to the Barcode
- setCodeTextColor() method to assign any color to the Code text of the barcode
- setBackColor() method to set the Background color of the barcode
- setBorderColor() method to set the Border color of the barcode

Developers can select any desired color using Java.awt.Color (part of Java) and then pass that selected color to any of the methods (setForeColor(), setCodeTextColor(), setBackColor ()or setBorderColor()) according to their custom requirements.</Description>
                  <FolderName>ColorizeanyPartoftheBarcodeImage</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Colorize any Part of the Barcode Image</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Colorize+any+Part+of+the+Barcode+Image</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Control Barcode Image Quality</Title>
                  <Description>Aspose.BarCode can render anti-aliased barcode images that provide much better quality due to anti-aliasing. The quality of anti-aliased barcode images is more distinguished when barcode is generated with high resolution. 
All you have to do is to call setImageQuality() method of BarCodeBuilder class provided by Aspose.BarCode) to any desired pre-defined image quality mode stored in ImageQualityMode class. 

The pre-defined image quality modes in ImageQualityMode class are listed below:

Default	: Specifies simple image rendering
AntiAlias	: Specifies Anti-aliased image rendering. Much better quality due to antialiasing but at a higher performance cost</Description>
                  <FolderName>ControlBarcodeImageQuality</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Control Barcode Image Quality</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Control+Barcode+Image+Quality</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Set Barcode Image Margins</Title>
                  <Description>It is possible to set barcode image margins using Aspose.BarCode. Margins is the area between the edges of the barcode image and its border. By default, the border of barcode image is visible on the barcode. If the border is shown, the image margin is between the border and the edges of the image. But, if the border is hidden then border margin will not be effected and image margin covers the area between the area captured by bars and the edges of the barcode image.

Developers can set the image margins of the barcode image by calling the setLeft (), setRight(), setTop() and setBottom() methods found in BarCodeBuilder class provided by com.aspose.barcode for margin settings of the barcode image.</Description>
                  <FolderName>SetBarcodeImageMargins</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Set Barcode Image Margins</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Set+Barcode+Image+Margins</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
        <Folder>
          <Title>Working with Barcode</Title>
          <Description>This section includes example for following topics: 

- Barcode Basic Features 
- Barcode Utility Features 
- Barcode Advance Features</Description>
          <FolderName>WorkingWithBarcode</FolderName>
          <Order>2</Order>
          <Folders>
            <Folder>
              <Title>Barcode Utility Features</Title>
              <Description>This section includes examples related to the following topics: 

- Specify Symbologies for Barcodes 
- Set Code text for Barcode 
- Control the appearance of Code text 
- Manage Caption of the Barcode</Description>
              <FolderName>BarcodeUtilityFeatures</FolderName>
              <Order>1</Order>
              <Examples>
                <Example>
                  <Title>Control the appearance of Code text</Title>
                  <Description>Aspose.BarCode provides complete control over the appearance of the Code text in the barcode image. There are many settings that can be applied on the Code text to customize its appearance. This example provides overview of how we can change the appearance(color, alignment and space) of barcode text.</Description>
                  <FolderName>ControlAppearanceOfCodeText</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Control the appearance of Code text</DisplayName>
                    <Url>Control+the+appearance+of+Code+text</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Manage Caption of the Barcode</Title>
                  <Description>Aspose.BarCode provides capability to customize the text, alignment, font, color and space of the caption using a Caption class to serve this purpose. All barcode generating classes have two properties, CaptionAbove and CaptionBelow that take an instance of Caption class. So, developers can create an object of Caption class and then assign that object to CaptionAbove, CaptionBelow or both properties to set the captions of the barcode. This example describes use and customization of Caption using Aspose.BarCode</Description>
                  <FolderName>ManageCaptionOfBarcode</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Manage Caption of the Barcode</DisplayName>
                    <Url>Manage+Caption+of+the+Barcode</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Specify Symbologies for Barcodes</Title>
                  <Description>Barcode is a system for automatic identification of items, such as books in a library, by means of printed bars of different widths which represent numbers. Barcodes are used for many reasons among them are, to speed up check out, to track sales and to help with inventory. The first set of numbers in a barcode is the manufacturer code, the second set of numbers in the barcode is the product code. The barcode was introduced in the early 80s and is often printed on the record sleeve only, sometimes also on the center record paper label.

Barcode Symbology is the protocol that defines a standard for arranging the bars and spaces (between the bars) that comprise a particular type of barcode, such as UPCA, EAN, Code128 etc.

Aspose.BarCode supports nearly all popular barcode symbologies. BarCodeBuilder class has a method setSymbologyType() that is used to set the symbology of a barcode.
Developers can pass any symbology to setSymbologyType() method from the pre-defined symbologies supported by Aspose.BarCode in Symbology enumeration.</Description>
                  <FolderName>SpecifySymbologiesforBarcodes</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Specify Symbologies for Barcodes</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Specify+Symbologies+for+Barcodes</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\code39Standard.out.png</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\code128.out.png</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\QR.out.png</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Set Code text for Barcode</Title>
                  <Description>A barcode is the representation of characters in the form of bars and spaces between them. So, it is a simple fact that we would also have to assign some characters to Aspose.BarCode so that the input characters could be converted to a barcode. We know that Aspose.BarCode has BarCodeBuilder class to create barcodes for different kinds of applications. All characters to be encoded to barcode are passed to setCodeText() method of the BarCodeBuilder class.

Developers can pass any set of characters to setCodeText() method but only according to its symbology type. For example, If the SymbologyType of barcode is Symbology.EAN13, the valid character set of EAN13 specification is limited to numeric values and contains 13 digits only. If you attempt to shorter CodeText to it, zero will be added, if longer CodeText, the outbound part will be truncated:</Description>
                  <FolderName>SetCodetextforBarcode</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Set Code text for Barcode</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Set+Code+text+for+Barcode</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\codetext.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
            <Folder>
              <Title>Barcode Advanced Features</Title>
              <Description>This section includes examples related to following topics: 

- Set Height of the Bars in the Barcode Image
- Manage X Dimension and Y Dimension
- Use Checksum and Supplement Data for Barcodes
- Wide Narrow Ratio
- Generate AustraliaPost Barcode with Different Format Control Code Options
- Set Start and Stop Symbols of Codabar Barcode
- Customize Code128 Barcodes</Description>
              <FolderName>BarcodeAdvancedFeatures</FolderName>
              <Order>2</Order>
              <Examples>
                <Example>
                  <Title>Set Height of the Bars in the Barcode Image</Title>
                  <Description>F developers want to control the height of the bars in the barcode, they can do it very easily by just setting the BarHeight property of all barcode generating classes offered by Aspose.BarCode. BarHeight property takes a float value to set the bar height and it's measuring unit is millimeter by default.

To change the measuring unit of the bar height, developers can make use of ImageUnit property of any barcode class ( BarCodeBuilder , BarCodeControl or BarCodeWebControl ) provided by Aspose.BarCode. This examples depicts the changing of height of BarCode bars in detail.</Description>
                  <FolderName>SetHeightBarcodeBars</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>Set Height of the Bars in the Barcode Image</DisplayName>
                    <Url>Set+Height+of+the+Bars+in+the+Barcode+Image</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode3.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcode7.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcode11.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Manage X Dimension and Y Dimension</Title>
                  <Description>Aspose.BarCode provides an xDimension property in all barcode generating classes that allows developers to set the X-Dimension of the bars in the barcode. Normally, X-Dimension is configured in Mils but to ease the job of developers, Aspose.BarCode uses Millimeter as a measuring unit by default. But of course, developers can modify the measuring unit according to their choice using ImageUnit property of any barcode class. Just like X-Dimension in linear barcodes, Y-Dimension is for 2D barcodes. This examples discusses the management of X and Y dimensions using Aspose.BarCode in a very easy way.</Description>
                  <FolderName>ManageXYDimension</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Manage X Dimension and Y Dimension</DisplayName>
                    <Url>Manage+X+Dimension+and+Y+Dimension</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcodeXDimensionChanged.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcodeYDimensionChanged.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Wide Narrow Ratio</Title>
                  <Description>Aspose.BarCode facilitates its developers to make use of WideNarrowRatio property of a barcode class to control the ratio of wide/narrow element of the barcode. To specify the ratio, you just need to pass a float value to the WideNarrowRatio property. This example depicts the usage of WideNarrowRatio property directly from the code.</Description>
                  <FolderName>WideNarrowRatio</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Wide Narrow Ratio</DisplayName>
                    <Url>Wide+Narrow+Ratio</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode_ratio_3.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcode_ratio_5.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcode_ratio_7.jpg</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcode_ratio_9.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Use Checksum for Barcodes</Title>
                  <Description>A Checksum is an error detection scheme in which some additional characters are added to a barcode to protect the integrity of barcode data. Checksums are not necessary for all kinds of barcodes. For example, Code128 and Code39 are self-checking and checksums for such symbologies are not necessary. But on the other hand, another symbology like Interleaved2Of5, which can only represent numeric data, has very little spaces between its bars and is prone to substitution errors. So, for such symbologies, checksums are necessary. There are also some symbologies such as UPC (Universal Product Code) that require a checksum.</Description>
                  <FolderName>UseChecksumforBarcodes</FolderName>
                  <Order>4</Order>
                  <DocLink>
                    <DisplayName>Use Checksum for Barcodes</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Use+Checksum+and+Supplement+Data+for+Barcodes</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode-checksum.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Generate AustraliaPost Barcode with Different Format Control Code Options</Title>
                  <Description>AustraliaPost barcode can be generated using following 6 different format control code options:

1. Standard
2. ReplyPaid
3. Customer2
4. Customer3
5. Routing
6. Redirection

These control code can be applied using BarCodeBuilder.setAustraliaPostFormatControlCode() method.</Description>
                  <FolderName>AustraliaPostBarcodewithDifferentFormatControlCodeOptions</FolderName>
                  <Order>6</Order>
                  <DocLink>
                    <DisplayName>Generate AustraliaPost Barcode with Different Format Control Code Options</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Generate+AustraliaPost+Barcode+with+Different+Format+Control+Code+Options</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcodeStandard.out.png</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcodeCustomer2.out.png</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Set Start and Stop Symbols of Codabar Barcode</Title>
                  <Description>The Codabar barcode has the following structure:
1. Start Symbol at the beginning (A, B, C or D)
2. Data to be encoded
3. End Symbol (A, B, C or D)

Using Aspose.BarCode for Java, you can customize the start and stop symbols according to your requirements, using BarCodeBuilder.setCodabarStartSymbol() and BarCodeBuilder.setCodabarStop Symbol() methods.</Description>
                  <FolderName>SetStartandStopSymbolsofCodabarBarcode</FolderName>
                  <Order>7</Order>
                  <DocLink>
                    <DisplayName>Set Start and Stop Symbols of Codabar Barcode</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Set+Start+and+Stop+Symbols+of+Codabar+Barcode</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode.out.png</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Customize Code128 Barcodes</Title>
                  <Description>Code128 barcode can be generated using 3 different code/character sets.

1. Code A
2. Code B
3. Code C

These code sets can be specified using BarCodeBuilder.setCode128CodeSet() method. Aspose.BarCode also provides the option to set the codeset as Auto, to choose the best possible code set internally.</Description>
                  <FolderName>CustomizeCode128Barcodes</FolderName>
                  <Order>8</Order>
                  <DocLink>
                    <DisplayName>Customize Code128 Barcodes</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Customize+Code128+Barcodes</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode-setA.out.png</Path>
                    </DataFile>
                    <DataFile>
                      <Path>..\Data\barcode-setC.out.png</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Use Supplement Data for Barcodes</Title>
                  <Description>UPCA, UPCE, EAN13 and EAN8 symbologies may all include an additional barcode to the right of the main barcode. This second barcode that is usually not as tall as the main barcode, is called Supplemental Barcode and is used to encode additional information for newspapers, books and other periodicals.</Description>
                  <FolderName>UseSupplementDataforBarcodes</FolderName>
                  <Order>5</Order>
                  <DocLink>
                    <DisplayName>Use Supplement Data for Barcodes</DisplayName>
                    <Url>http://www.aspose.com/docs/display/barcodejava/Use+Checksum+and+Supplement+Data+for+Barcodes</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\barcode-supplement-data.out.jpg</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
    <Folder>
      <Title>Knowledge Base</Title>
      <Description>This Section includes examples related to following topics: 

- Technical Articles
- Utilize Aspose.BarCode in Other Programming Languages</Description>
      <FolderName>KnowledgeBase</FolderName>
      <Order>2</Order>
      <Folders>
        <Folder>
          <Title>Technical Articles</Title>
          <Description>This Section includes examples related to following topics: 

- Printing 
- Databases 
- Reporting 
- Integration with Aspose Components 
- How to read barcode from multi-page TIFF images 
- How to Generate and Recognize BarCodes for UTF-8 (Unicode) Characters 
- Get the Product Name and DLL Version Information 
- How to use Web Service to Create Barcode</Description>
          <FolderName>TechnicalArticles</FolderName>
          <Order>1</Order>
          <Folders>
            <Folder>
              <Title>Integration with Aspose Components</Title>
              <Description>This Section includes examples related to following topics: 

- How to Integrate Aspose.BarCode for .NET with Aspose.Pdf? 
- Recognize Barcode from Pdf Document 
- How to Integrate Aspose.BarCode for .NET with Aspose.Words? 
- Recognize Barcode from Word Document 
- How to Integrate Aspose.BarCode for .NET with Aspose.Cells?</Description>
              <FolderName>IntegrationWithAsposeComponents</FolderName>
              <Order>1</Order>
              <Examples>
                <Example>
                  <Title>How to Integrate Aspose.BarCode with Aspose.Words</Title>
                  <Description>In this example, we will learn about how we can add a barcode image generated by Aspose.BarCode into a Microsoft Word document (*.doc) programmatically by integrating Aspose.BarCode and Aspose.Word components.</Description>
                  <FolderName>IntegrateWithAsposeWords</FolderName>
                  <Order>1</Order>
                  <DocLink>
                    <DisplayName>How to Integrate Aspose.BarCode for .NET with Aspose.Words</DisplayName>
                    <Url>How+to+Integrate+Aspose.BarCode+for+.NET+with+Aspose.Words</Url>
                  </DocLink>
                  <OutputFiles>
                    <DataFile>
                      <Path>..\Data\Myfile.doc</Path>
                    </DataFile>
                  </OutputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Recognize Barcode from Pdf Document</Title>
                  <Description>In this example, we will recognize barcode from a pdf document using Aspose.BarCode and Aspose.Pdf.
We will follow the below steps for reading barcode from the pdf document:

- Extract image from pdf document using Aspose.Pdf
- Save the extracted image as stream
- Pass the image in form of stream to Aspose.BarCode
- Read barcode from the image</Description>
                  <FolderName>RecognizeBarcodeFromPdf</FolderName>
                  <Order>2</Order>
                  <DocLink>
                    <DisplayName>Recognize Barcode from Pdf Document</DisplayName>
                    <Url>Recognize+Barcode+from+Pdf+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\document.pdf</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
                <Example>
                  <Title>Recognize Barcode from Word Document</Title>
                  <Description>In this example, recognition of barcode from a Word document using Aspose.BarCode and Aspose.Words is performed and is explained in detail.

We will follow the below steps for reading barcode from the Word document:

- Extract image from Word document using Aspose.Words for .NET
- Save the extracted image as stream
- Pass the image in form of stream to Aspose.BarCode for .NET
- Read barcode from the image</Description>
                  <FolderName>RecognizeBarcodeFromWord</FolderName>
                  <Order>3</Order>
                  <DocLink>
                    <DisplayName>Recognize Barcode from Word Document</DisplayName>
                    <Url>Recognize+Barcode+from+Word+Document</Url>
                  </DocLink>
                  <InputFiles>
                    <DataFile>
                      <Path>..\Data\input.doc</Path>
                    </DataFile>
                  </InputFiles>
                  <Type>Console</Type>
                </Example>
              </Examples>
            </Folder>
          </Folders>
        </Folder>
      </Folders>
    </Folder>
  </Folders>
</Data>